
SQLite Async operation in Xamarin application.

In Brief: SQLite is the most widely used backend for Android and iOS mobile application. SQLite is a light weight relational datbase stores a data 
to a text file on a device.
In this post i'll create a sample iOS application to perform an Async SQLite CRUD operations.

[img]

In Detail: There are many way to store data in mobile application like in shared preference,user default, text/json and Xml file etc.
Whenever user need to store large data, SQLite is the better option. It is best practice to communicate with the database with the 
background thread without blocking the UI thread. 
Here i'm using xamarin Sqlite component to perform the Async CRUD operation. In this example i'm adding the new contact entry to phone bbok
,update the existing contact and deleting a contact.

Phone Contact table :
---------------------------------------------------------
int     | Id               |  PrimaryKey | AutoIncrement
---------------------------------------------------------
string  | strContactName   |
---------------------------------------------------------
long    | strContactNumber |
---------------------------------------------------------

In steps: 
step 1: Prepare PhoneContact Class 
Define class with Phone contact property as follows,
using SQLite;
namespace SqliteDemo
{
	public class PhoneContactClass
	{
		[PrimaryKey, AutoIncrement]
		public int Id{ get; set;}
		[NotNull]
		public string strContactName{get;set;} 
		public long strContactNumber{ get; set;}
	}
}

step 2: Create SQLite connection class.
To support async operation need instantiate SQLiteAsyncConnection class.

using SQLite;
namespace SqliteDemo
{
	public static class DbConnectionClass
	{
		static SQLiteAsyncConnection sqliteAsyncConnection;  
		public static SQLiteAsyncConnection FnGetConnection()
		{			
			if ( sqliteAsyncConnection == null )
				sqliteAsyncConnection = new SQLiteAsyncConnection (System.IO.Path.Combine(ConstantsClass.strDbFolderPath,ConstantsClass.strDatabaseName ));
		    	return sqliteAsyncConnection; 
		} 
	}
}

2.)Initialize the async connection object and create table.
Declare the async connection object once and throughout the viewcontroller only this single connection object is used for the 
SQlite connectivity.
CreateTableAsync creates the table of specified type if the table does not exist.


    SQLiteAsyncConnection sqlAsyncConnection; 

    sqlAsyncConnection =	DbConnectionClass.FnGetConnection ();  
    sqlAsyncConnection.CreateTableAsync<PhoneContactClass> ();

Step 3: CRUD operations

3.a)Inserting new record:
Insert a new record of type PhoneContactLocalClass. It returns no of rows affected
async Task<int>FnInsertRecord(string strContactName,long lngContactNumber)
		{
			objPhoneContactLocalClass = new PhoneContactClass ();
			objPhoneContactLocalClass.strContactName =  strContactName;
			objPhoneContactLocalClass.strContactNumber = lngContactNumber;

			int intRow=await sqlAsyncConnection.InsertAsync ( objPhoneContactLocalClass ); 
			objPhoneContactLocalClass=null;
			return intRow;
		}

3.b)Read Record:
       async Task<List<PhoneContactClass>> FnGetAllContactList()
		{     
			var	lstAllContact=await sqlAsyncConnection.QueryAsync<PhoneContactClass> ( "select Id,strContactName,strContactNumber from PhoneContactClass order by strContactName COLLATE NOCASE ASC"  );
			FnStopActivityIndicator ();
			return lstAllContact;
		}

		async Task<List<PhoneContactClass>>FnGetContactList(string str)
		{ 
			var lstContact =await  sqlAsyncConnection.Table<PhoneContactClass> ().Where ( v => v.strContactName.Contains ( str ) ).ToListAsync(); 
			return lstContact; 
		} 

3.c)Update record:
async Task<int> FnUpdateRecord(string strContactName,long lngContactNumber)
		{ 
			objPhoneContactClass.strContactName = strContactName;
			objPhoneContactClass.strContactNumber = lngContactNumber; 
			string  strQry=string.Format( "update PhoneContactClass set strContactName='{0}',strContactNumber={1} where Id={2}",objPhoneContactClass.strContactName,objPhoneContactClass.strContactNumber,objPhoneContactClass.Id); 
			await sqlAsyncConnection.QueryAsync<PhoneContactClass> ( strQry );  
			return 0;
		}
3.d)Delete record: 

     async Task<int> FnUpdateRecord()
		{ 
		         int intRows = await sqlAsyncConnection.DeleteAsync ( objPhoneContactClass );
        }


